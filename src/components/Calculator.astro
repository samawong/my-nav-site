---
---

<div class="calculator bg-white rounded-lg shadow-sm p-4">
  <div class="display bg-gray-100 rounded p-3 mb-3">
    <input type="text" id="calc-display" class="w-full text-right text-xl font-mono bg-transparent outline-none" readonly value="0" />
  </div>
  
  <div class="grid grid-cols-4 gap-2">
    <!-- 第一行 -->
    <button class="calc-btn operator bg-gray-200" data-value="C">C</button>
    <button class="calc-btn operator bg-gray-200" data-value="±">±</button>
    <button class="calc-btn operator bg-gray-200" data-value="%">%</button>
    <button class="calc-btn operator bg-blue-500 text-white" data-value="÷">÷</button>
    
    <!-- 第二行 -->
    <button class="calc-btn number" data-value="7">7</button>
    <button class="calc-btn number" data-value="8">8</button>
    <button class="calc-btn number" data-value="9">9</button>
    <button class="calc-btn operator bg-blue-500 text-white" data-value="×">×</button>
    
    <!-- 第三行 -->
    <button class="calc-btn number" data-value="4">4</button>
    <button class="calc-btn number" data-value="5">5</button>
    <button class="calc-btn number" data-value="6">6</button>
    <button class="calc-btn operator bg-blue-500 text-white" data-value="-">-</button>
    
    <!-- 第四行 -->
    <button class="calc-btn number" data-value="1">1</button>
    <button class="calc-btn number" data-value="2">2</button>
    <button class="calc-btn number" data-value="3">3</button>
    <button class="calc-btn operator bg-blue-500 text-white" data-value="+">+</button>
    
    <!-- 第五行 -->
    <button class="calc-btn number col-span-2 w-full" data-value="0">0</button>
    <button class="calc-btn number" data-value=".">.</button>
    <button class="calc-btn operator bg-blue-500 text-white" data-value="=">=</button>
  </div>
</div>

<script>
  class Calculator {
    private display: HTMLInputElement;
    private currentValue: string;
    private previousValue: string;
    private operator: string;
    private newNumber: boolean;

    constructor() {
      this.display = document.getElementById('calc-display') as HTMLInputElement;
      this.currentValue = '0';
      this.previousValue = '';
      this.operator = '';
      this.newNumber = true;
      
      this.initEventListeners();
    }

    private initEventListeners(): void {
      document.querySelectorAll('.calc-btn').forEach(button => {
        button.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          const value = target.getAttribute('data-value');
          if (!value) return;

          if (target.classList.contains('number')) {
            this.handleNumber(value);
          } else {
            this.handleOperator(value);
          }
          
          this.updateDisplay();
        });
      });
    }

    private handleNumber(num: string): void {
      if (this.newNumber) {
        this.currentValue = num === '.' ? '0.' : num;
        this.newNumber = false;
      } else {
        if (num === '.' && this.currentValue.includes('.')) return;
        this.currentValue = this.currentValue === '0' && num !== '.' 
          ? num 
          : this.currentValue + num;
      }
    }

    private handleOperator(op: string): void {
      switch(op) {
        case 'C':
          this.clear();
          break;
        case '±':
          this.toggleSign();
          break;
        case '%':
          this.percentage();
          break;
        case '=':
          this.calculate();
          break;
        default:
          this.setOperator(op);
      }
    }

    private clear(): void {
      this.currentValue = '0';
      this.previousValue = '';
      this.operator = '';
      this.newNumber = true;
    }

    private toggleSign(): void {
      this.currentValue = (parseFloat(this.currentValue) * -1).toString();
    }

    private percentage(): void {
      this.currentValue = (parseFloat(this.currentValue) / 100).toString();
    }

    private setOperator(op: string): void {
      if (this.previousValue && !this.newNumber) {
        this.calculate();
      }
      this.previousValue = this.currentValue;
      this.operator = op;
      this.newNumber = true;
    }

    private calculate(): void {
      if (!this.previousValue || !this.operator) return;
      
      const prev = parseFloat(this.previousValue);
      const current = parseFloat(this.currentValue);
      let result = 0;

      switch(this.operator) {
        case '+':
          result = prev + current;
          break;
        case '-':
          result = prev - current;
          break;
        case '×':
          result = prev * current;
          break;
        case '÷':
          if (current === 0) {
            this.clear();
            this.currentValue = 'Error';
            return;
          }
          result = prev / current;
          break;
      }

      this.currentValue = this.formatResult(result);
      this.previousValue = '';
      this.operator = '';
      this.newNumber = true;
    }

    private formatResult(num: number): string {
      return num.toString().length > 10 
        ? num.toFixed(8).replace(/\.?0+$/, '')
        : num.toString();
    }

    private updateDisplay(): void {
      this.display.value = this.currentValue;
    }
  }

  // 初始化计算器
  new Calculator();
</script>

<style>
  .calculator {
    max-width: 300px;
    margin: 0 auto;
  }

  .calc-btn {
    @apply rounded-lg p-3 text-center font-medium transition-colors duration-200;
  }

  .number {
    @apply bg-gray-50 hover:bg-gray-100;
  }

  .operator {
    @apply hover:opacity-90;
  }
</style> 