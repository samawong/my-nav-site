---
// 移除服务端的节日数据计算
interface Holiday {
  name: string;
  type: string;
  date: Date;
  daysLeft: number;
}
---

<div class="grid grid-cols-2 gap-4">
  <!-- 左栏：春节倒计时 -->
  <div id="spring-festival" class="bg-gradient-to-br from-red-50 to-pink-50 rounded-lg p-4 hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1">
    <!-- 春节倒计时将由 JavaScript 动态生成 -->
  </div>

  <!-- 右栏：其他节日列表 -->
  <div id="other-holidays" class="bg-white rounded-lg p-4">
    <!-- 其他节日列表将由 JavaScript 动态生成 -->
  </div>
</div>

<script>
  // 节日数据
  const FESTIVALS: {
    FIXED: Record<string, { name: string; type: string }>;
    TRADITIONAL: Record<string, { name: string; type: string }>;
    SOLAR_TERMS: Record<string, { name: string; type: string }>;
  } = {
    // 法定节假日（固定日期）
    FIXED: {
      "01-01": { name: "元旦", type: "法定" },
      "05-01": { name: "劳动节", type: "法定" },
      "10-01": { name: "国庆节", type: "法定" }
    },
    // 传统节日（2025年对应的公历日期）
    TRADITIONAL: {
      "2025-01-29": { name: "春节", type: "传统" },
      "2025-02-12": { name: "元宵节", type: "传统" },
      "2025-04-04": { name: "清明节", type: "传统" },
      "2025-06-23": { name: "端午节", type: "传统" },
      "2025-08-21": { name: "七夕节", type: "传统" },
      "2025-09-21": { name: "中秋节", type: "传统" },
      "2025-10-28": { name: "重阳节", type: "传统" }
    },
    // 二十四节气（2025年）
    SOLAR_TERMS: {
      "2025-01-05": { name: "小寒", type: "节气" },
      "2025-01-20": { name: "大寒", type: "节气" },
      "2025-02-03": { name: "立春", type: "节气" },
      "2025-02-18": { name: "雨水", type: "节气" },
      "2025-03-05": { name: "惊蛰", type: "节气" },
      "2025-03-20": { name: "春分", type: "节气" },
      "2025-04-04": { name: "清明", type: "节气" },
      "2025-04-20": { name: "谷雨", type: "节气" },
      "2025-05-05": { name: "立夏", type: "节气" },
      "2025-05-21": { name: "小满", type: "节气" },
      "2025-06-05": { name: "芒种", type: "节气" },
      "2025-06-21": { name: "夏至", type: "节气" },
      "2025-07-07": { name: "小暑", type: "节气" },
      "2025-07-22": { name: "大暑", type: "节气" },
      "2025-08-07": { name: "立秋", type: "节气" },
      "2025-08-23": { name: "处暑", type: "节气" },
      "2025-09-07": { name: "白露", type: "节气" },
      "2025-09-22": { name: "秋分", type: "节气" },
      "2025-10-08": { name: "寒露", type: "节气" },
      "2025-10-23": { name: "霜降", type: "节气" },
      "2025-11-07": { name: "立冬", type: "节气" },
      "2025-11-22": { name: "小雪", type: "节气" },
      "2025-12-07": { name: "大雪", type: "节气" },
      "2025-12-22": { name: "冬至", type: "节气" }
    }
  };

  function updateHolidays() {
    const now = new Date();
    const currentYear = now.getFullYear();
    const currentMonth = (now.getMonth() + 1).toString().padStart(2, '0');
    const currentDate = now.getDate().toString().padStart(2, '0');
    const today = `${currentYear}-${currentMonth}-${currentDate}`;
    
    // 收集所有即将到来的节日
    const upcomingHolidays: Holiday[] = [];
    
    // 检查固定节日
    Object.entries(FESTIVALS.FIXED).forEach(([date, festival]) => {
      const [month, day] = date.split('-');
      const festivalDate = new Date(currentYear, parseInt(month) - 1, parseInt(day));
      if (festivalDate < now) {
        festivalDate.setFullYear(currentYear + 1);
      }
      upcomingHolidays.push({
        name: festival.name,
        type: festival.type,
        date: festivalDate,
        daysLeft: Math.ceil((festivalDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))
      });
    });
    
    // 检查传统节日和节气
    [...Object.entries(FESTIVALS.TRADITIONAL), ...Object.entries(FESTIVALS.SOLAR_TERMS)].forEach(([date, festival]) => {
      const festivalDate = new Date(date);
      if (festivalDate > now) {
        upcomingHolidays.push({
          name: festival.name,
          type: festival.type,
          date: festivalDate,
          daysLeft: Math.ceil((festivalDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))
        });
      }
    });
    
    // 按日期排序
    upcomingHolidays.sort((a, b) => a.daysLeft - b.daysLeft);
    
    // 分离春节和其他节日
    const springFestival = upcomingHolidays.find(h => h.name === "春节");
    const otherHolidays = upcomingHolidays.filter(h => h.name !== "春节").slice(0, 3);
    
    // 更新春节倒计时
    const springFestivalElement = document.getElementById('spring-festival');
    if (springFestivalElement && springFestival) {
      springFestivalElement.innerHTML = `
        <div class="text-center">
          <div class="text-lg font-medium text-red-600 mb-2">距离春节</div>
          <div class="text-4xl font-bold text-red-600 mb-2">
            ${springFestival.daysLeft}
            <span class="text-base ml-1">天</span>
          </div>
          <div class="text-sm text-gray-600">
            ${springFestival.date.getFullYear()}年${springFestival.date.getMonth() + 1}月${springFestival.date.getDate()}日
          </div>
        </div>
      `;
    }
    
    // 更新其他节日列表
    const otherHolidaysElement = document.getElementById('other-holidays');
    if (otherHolidaysElement) {
      otherHolidaysElement.innerHTML = `
        <div class="space-y-3">
          ${otherHolidays.map(holiday => `
            <div class="flex items-center text-sm">
              <div class="w-2 h-2 rounded-full ${getTypeColor(holiday.type)} mr-2"></div>
              <div class="flex-1">
                <div class="flex items-center justify-between">
                  <span class="${getTypeTextColor(holiday.type)}">
                    ${holiday.name}
                  </span>
                  <span class="text-gray-500">
                    ${holiday.daysLeft}天
                  </span>
                </div>
                <div class="text-gray-400 text-xs mt-0.5">
                  ${formatDate(holiday.date)}
                </div>
              </div>
            </div>
          `).join('')}
        </div>
      `;
    }
  }

  function getTypeColor(type: string): string {
    switch (type) {
      case '法定':
        return 'bg-green-500';
      case '传统':
        return 'bg-red-500';
      case '节气':
        return 'bg-blue-500';
      default:
        return 'bg-gray-500';
    }
  }

  function getTypeTextColor(type: string): string {
    switch (type) {
      case '法定':
        return 'text-green-600';
      case '传统':
        return 'text-red-600';
      case '节气':
        return 'text-blue-600';
      default:
        return 'text-gray-600';
    }
  }

  function formatDate(date: Date): string {
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const day = date.getDate().toString().padStart(2, '0');
    return `${month}.${day}`;
  }

  // 初始更新
  updateHolidays();

  // 每天凌晨更新一次
  setInterval(() => {
    const now = new Date();
    if (now.getHours() === 0 && now.getMinutes() === 0) {
      updateHolidays();
    }
  }, 60000); // 每分钟检查一次
</script>

<style>
  .holiday-counter {
    min-height: 200px;
  }
</style>