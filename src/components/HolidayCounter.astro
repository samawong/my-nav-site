---
import { SOLAR_TERMS_DATE_2025, TRADITIONAL_FESTIVALS, LEGAL_FESTIVALS } from '../data/calendar';

interface Holiday {
  name: string;
  date: Date;
  type: 'solar-term' | 'traditional' | 'legal';
  daysLeft: number;
}

// 2025年农历节日对应的公历日期（已校对）
const LUNAR_DATES_2025: Record<string, { date: string; description?: string }> = {
  '腊月廿三': { 
    date: '2025-01-21',
    description: '小年，北方地区祭灶神'
  },
  '腊月廿九': { 
    date: '2025-01-28',
    description: '除夕，2025年农历腊月共29天'
  },
  '正月初一': { 
    date: '2025-01-29',
    description: '春节，农历乙巳年大年初一'
  },
  '正月十五': { 
    date: '2025-02-12',
    description: '元宵节，上元节'
  },
  '二月初二': { 
    date: '2025-03-01',
    description: '龙抬头，农历二月初二'
  },
  '五月初五': { 
    date: '2025-05-31',
    description: '端午节，屈原纪念日'
  },
  '七月初七': { 
    date: '2025-08-01',
    description: '七夕节，牛郎织女相会'
  },
  '七月十五': { 
    date: '2025-08-09',
    description: '中元节，盂兰盆节'
  },
  '八月十五': { 
    date: '2025-09-06',
    description: '中秋节，月圆之夜'
  },
  '九月初九': { 
    date: '2025-09-29',
    description: '重阳节，登高望远'
  },
  '腊月初八': { 
    date: '2025-12-28',
    description: '腊八节，腊八粥'
  }
};
// Function to get upcoming holidays
function getUpcomingHolidays(): Holiday[] {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const holidays: Holiday[] = [];

  // Add solar terms
  Object.entries(SOLAR_TERMS_DATE_2025).forEach(([term, dateStr]) => {
    const date = new Date(dateStr);
    const daysLeft = Math.ceil((date.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
    if (daysLeft >= 0) {
      holidays.push({
        name: term,
        date,
        type: 'solar-term',
        daysLeft
      });
    }
  });

  // Add traditional festivals
  Object.entries(LUNAR_DATES_2025).forEach(([lunarDate, info]) => {
    const date = new Date(info.date);
    const daysLeft = Math.ceil((date.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
    if (daysLeft >= 0) {
      holidays.push({
        name: TRADITIONAL_FESTIVALS[lunarDate],
        date,
        type: 'traditional',
        daysLeft
      });
    }
  });

  // Add legal holidays
  Object.entries(LEGAL_FESTIVALS).forEach(([dateStr, name]) => {
    const [month, day] = dateStr.split('-').map(Number);
    let date = new Date(2025, month - 1, day);
    if (date < today) {
      date = new Date(2026, month - 1, day);
    }
    const daysLeft = Math.ceil((date.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
    if (daysLeft >= 0) {
      holidays.push({
        name,
        date,
        type: 'legal',
        daysLeft
      });
    }
  });

  return holidays.sort((a, b) => a.daysLeft - b.daysLeft);
}

function formatDateRange(date: Date): string {
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const day = date.getDate().toString().padStart(2, '0');
  return `${month}.${day}`;
}

function getHolidayTypeColor(type: Holiday['type']): string {
  switch (type) {
    case 'traditional':
      return 'text-red-500';
    case 'solar-term':
      return 'text-blue-500';
    case 'legal':
      return 'text-green-500';
    default:
      return 'text-gray-500';
  }
}

function getHolidayTypeText(type: Holiday['type']): string {
  switch (type) {
    case 'traditional':
      return '传统节日';
    case 'solar-term':
      return '节气';
    case 'legal':
      return '法定节假日';
    default:
      return '';
  }
}

const holidays = getUpcomingHolidays();
const springFestival = holidays.find(h => h.name === '春节');
const otherHolidays = holidays.filter(h => h.name !== '春节').slice(0, 3);
---

<div class="grid grid-cols-2 gap-4">
  <!-- 左栏：春节倒计时 -->
  <div class="bg-gradient-to-br from-red-50 to-pink-50 rounded-lg p-4 hover:shadow-lg transition-shadow">
    {springFestival && (
      <div class="text-center">
        <div class="text-lg font-medium text-red-600 mb-2">距离春节</div>
        <div class="text-4xl font-bold text-red-600 mb-2">
          {springFestival.daysLeft}
          <span class="text-base ml-1">天</span>
        </div>
        <div class="text-sm text-gray-600">
          {springFestival.date.getFullYear()}年{springFestival.date.getMonth() + 1}月{springFestival.date.getDate()}日
        </div>
        <div class="mt-2 text-xs text-gray-500">
          农历乙巳年正月初一
        </div>
      </div>
    )}
  </div>

  <!-- 右栏：其他节日列表 -->
  <div class="bg-white rounded-lg p-4">
    <div class="space-y-3">
      {otherHolidays.map(holiday => (
        <div class="flex items-center text-sm">
          <div class={`w-2 h-2 rounded-full ${getHolidayTypeColor(holiday.type)} mr-2`} />
          <div class="flex-1">
            <div class="flex items-center justify-between">
              <span class={getHolidayTypeColor(holiday.type)}>
                {holiday.name}
              </span>
              <span class="text-gray-500">
                {holiday.daysLeft}天
               
              </span>
            </div>
            <div class="text-gray-400 text-xs mt-0.5">
              {formatDateRange(holiday.date)}
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</div>

<style>
  .bg-gradient-to-br {
    transition: all 0.3s ease;
  }
  
  .bg-gradient-to-br:hover {
    transform: translateY(-2px);
  }
</style>